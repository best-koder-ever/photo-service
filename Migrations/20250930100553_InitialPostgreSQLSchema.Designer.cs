// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotoService.Data;

#nullable disable

namespace PhotoService.Migrations
{
    [DbContext(typeof(PhotoContext))]
    [Migration("20250930100553_InitialPostgreSQLSchema")]
    partial class InitialPostgreSQLSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotoService.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("content_hash");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("display_order");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("file_extension");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_bytes");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary");

                    b.Property<JsonDocument>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mime_type");

                    b.Property<string>("ModerationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("moderation_notes");

                    b.Property<string>("ModerationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("AUTO_APPROVED")
                        .HasColumnName("moderation_status");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("original_file_name");

                    b.Property<int>("QualityScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100)
                        .HasColumnName("quality_score");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stored_file_name");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("ContentHash")
                        .HasDatabaseName("ix_photos_content_hash");

                    b.HasIndex("Metadata")
                        .HasDatabaseName("ix_photos_metadata_gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.HasIndex("ModerationStatus")
                        .HasDatabaseName("ix_photos_moderation_status");

                    b.HasIndex("Tags")
                        .HasDatabaseName("ix_photos_tags_gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Tags"), "gin");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_photos_user_id");

                    b.HasIndex("UserId", "IsDeleted", "DisplayOrder")
                        .HasDatabaseName("ix_photos_user_active_display_order");

                    b.HasIndex("UserId", "IsPrimary", "IsDeleted")
                        .HasDatabaseName("ix_photos_user_primary_active");

                    b.ToTable("photos", null, t =>
                        {
                            t.HasCheckConstraint("ck_photos_dimensions_positive", "width > 0 AND height > 0");

                            t.HasCheckConstraint("ck_photos_display_order_positive", "display_order > 0");

                            t.HasCheckConstraint("ck_photos_file_size_positive", "file_size_bytes > 0");

                            t.HasCheckConstraint("ck_photos_quality_score_range", "quality_score >= 0 AND quality_score <= 100");
                        });
                });

            modelBuilder.Entity("PhotoService.Models.PhotoModerationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ModeratorId")
                        .HasColumnType("integer")
                        .HasColumnName("moderator_id");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("new_status");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("photo_id");

                    b.Property<string>("PreviousStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("previous_status");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_photo_moderation_logs_created_at");

                    b.HasIndex("ModeratorId")
                        .HasDatabaseName("ix_photo_moderation_logs_moderator_id");

                    b.HasIndex("PhotoId")
                        .HasDatabaseName("ix_photo_moderation_logs_photo_id");

                    b.ToTable("photo_moderation_logs", (string)null);
                });

            modelBuilder.Entity("PhotoService.Models.PhotoProcessingJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("error_message");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("job_type");

                    b.Property<JsonDocument>("Parameters")
                        .HasColumnType("jsonb")
                        .HasColumnName("parameters");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("photo_id");

                    b.Property<JsonDocument>("Result")
                        .HasColumnType("jsonb")
                        .HasColumnName("result");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("PENDING")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_photo_processing_jobs_created_at");

                    b.HasIndex("PhotoId")
                        .HasDatabaseName("ix_photo_processing_jobs_photo_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_photo_processing_jobs_status");

                    b.ToTable("photo_processing_jobs", (string)null);
                });

            modelBuilder.Entity("PhotoService.Models.PhotoModerationLog", b =>
                {
                    b.HasOne("PhotoService.Models.Photo", null)
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_photo_moderation_logs_photo_id");
                });

            modelBuilder.Entity("PhotoService.Models.PhotoProcessingJob", b =>
                {
                    b.HasOne("PhotoService.Models.Photo", null)
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_photo_processing_jobs_photo_id");
                });
#pragma warning restore 612, 618
        }
    }
}
