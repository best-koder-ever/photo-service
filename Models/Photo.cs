using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace PhotoService.Models;

/// <summary>
/// Photo entity representing user uploaded photos in the dating app
/// Standard entity model with comprehensive metadata for photo management
/// </summary>
[Table("Photos")]
public class Photo
{
    /// <summary>
    /// Primary key - Auto-incrementing photo identifier
    /// </summary>
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int Id { get; set; }

    /// <summary>
    /// User identifier from auth service - Foreign key relationship
    /// Links photo to specific user account
    /// </summary>
    [Required]
    public int UserId { get; set; }

    /// <summary>
    /// Original filename as uploaded by user
    /// Preserved for reference and download purposes
    /// </summary>
    [Required]
    [MaxLength(255)]
    public string OriginalFileName { get; set; } = string.Empty;

    /// <summary>
    /// Unique filename generated by system for storage
    /// Prevents naming conflicts and ensures uniqueness
    /// Format: {userId}_{timestamp}_{guid}.{extension}
    /// </summary>
    [Required]
    [MaxLength(255)]
    public string StoredFileName { get; set; } = string.Empty;

    /// <summary>
    /// File extension (e.g., .jpg, .png, .webp)
    /// Used for MIME type determination and validation
    /// </summary>
    [Required]
    [MaxLength(10)]
    public string FileExtension { get; set; } = string.Empty;

    /// <summary>
    /// File size in bytes
    /// Used for storage management and validation
    /// </summary>
    [Required]
    public long FileSizeBytes { get; set; }

    /// <summary>
    /// Image width in pixels
    /// Stored after image processing for UI optimization
    /// </summary>
    public int Width { get; set; }

    /// <summary>
    /// Image height in pixels
    /// Stored after image processing for UI optimization
    /// </summary>
    public int Height { get; set; }

    /// <summary>
    /// Display order for user's photo gallery
    /// Lower numbers appear first (1 = primary profile photo)
    /// </summary>
    [Required]
    public int DisplayOrder { get; set; } = 1;

    /// <summary>
    /// Indicates if this is the user's primary profile photo
    /// Only one photo per user should have this set to true
    /// </summary>
    [Required]
    public bool IsPrimary { get; set; } = false;

    /// <summary>
    /// Photo upload timestamp
    /// UTC time for consistency across timezones
    /// </summary>
    [Required]
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Last update timestamp
    /// Updated when photo metadata changes (order, primary status, etc.)
    /// </summary>
    public DateTime? UpdatedAt { get; set; }

    /// <summary>
    /// Soft delete flag - photos are not physically deleted immediately
    /// Allows for recovery and maintains referential integrity
    /// </summary>
    [Required]
    public bool IsDeleted { get; set; } = false;

    /// <summary>
    /// Deletion timestamp for audit purposes
    /// Set when IsDeleted becomes true
    /// </summary>
    public DateTime? DeletedAt { get; set; }

    /// <summary>
    /// Content moderation status
    /// AUTO_APPROVED, PENDING_REVIEW, APPROVED, REJECTED
    /// </summary>
    [Required]
    [MaxLength(20)]
    public string ModerationStatus { get; set; } = "AUTO_APPROVED";

    /// <summary>
    /// Moderation notes from content review team
    /// Populated when manual review occurs
    /// </summary>
    [MaxLength(500)]
    public string? ModerationNotes { get; set; }

    /// <summary>
    /// Image quality score from processing (1-100)
    /// Used for automatic quality filtering
    /// </summary>
    public int QualityScore { get; set; } = 100;

    /// <summary>
    /// Calculated property: Full file path for storage
    /// Combines storage directory with stored filename
    /// </summary>
    [NotMapped]
    public string FilePath => $"uploads/photos/{UserId}/{StoredFileName}";

    /// <summary>
    /// Calculated property: Public URL for photo access
    /// Used by frontend to display images
    /// </summary>
    [NotMapped]
    public string Url => $"/api/photos/{Id}/image";

    /// <summary>
    /// Calculated property: Thumbnail URL for optimized loading
    /// Thumbnail version for list views and previews
    /// </summary>
    [NotMapped]
    public string ThumbnailUrl => $"/api/photos/{Id}/thumbnail";

    /// <summary>
    /// Calculated property: Medium-sized image URL
    /// Balanced quality/size for profile views
    /// </summary>
    [NotMapped]
    public string MediumUrl => $"/api/photos/{Id}/medium";
}

/// <summary>
/// Photo moderation status enumeration
/// Standardized values for content moderation workflow
/// </summary>
public static class ModerationStatus
{
    public const string AutoApproved = "AUTO_APPROVED";
    public const string PendingReview = "PENDING_REVIEW";
    public const string Approved = "APPROVED";
    public const string Rejected = "REJECTED";
}

/// <summary>
/// Photo display constants
/// Standard configuration values for photo management
/// </summary>
public static class PhotoConstants
{
    /// <summary>
    /// Maximum allowed file size: 10MB
    /// Prevents storage abuse and ensures reasonable upload times
    /// </summary>
    public const long MaxFileSizeBytes = 10 * 1024 * 1024;

    /// <summary>
    /// Maximum photos per user
    /// Standard limit for dating app profiles
    /// </summary>
    public const int MaxPhotosPerUser = 6;

    /// <summary>
    /// Allowed file extensions for photo uploads
    /// Common image formats with good browser support
    /// </summary>
    public static readonly string[] AllowedExtensions = { ".jpg", ".jpeg", ".png", ".webp" };

    /// <summary>
    /// Supported MIME types for validation
    /// Corresponds to allowed extensions
    /// </summary>
    public static readonly string[] AllowedMimeTypes = 
    {
        "image/jpeg",
        "image/jpg", 
        "image/png",
        "image/webp"
    };

    /// <summary>
    /// Standard image sizes for responsive display
    /// Optimized for common device breakpoints
    /// </summary>
    public static class ImageSizes
    {
        public const int ThumbnailWidth = 150;
        public const int ThumbnailHeight = 150;
        
        public const int MediumWidth = 400;
        public const int MediumHeight = 400;
        
        public const int LargeWidth = 800;
        public const int LargeHeight = 800;
    }
}
