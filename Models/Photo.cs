using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json;

namespace PhotoService.Models;

/// <summary>
/// Photo entity designed specifically for PostgreSQL with modern dating app features
/// Includes JSONB metadata, tag arrays, and comprehensive audit trail
/// </summary>
[Table("photos")]
public class Photo
{
    /// <summary>
    /// Primary key - PostgreSQL IDENTITY column
    /// </summary>
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int Id { get; set; }

    /// <summary>
    /// User identifier from auth service - Foreign key relationship
    /// </summary>
    [Required]
    public int UserId { get; set; }

    /// <summary>
    /// Original filename as uploaded by user
    /// </summary>
    [Required]
    [MaxLength(255)]
    public string OriginalFileName { get; set; } = string.Empty;

    /// <summary>
    /// Unique filename generated by system for storage
    /// Format: {userId}_{timestamp}_{guid}.{extension}
    /// </summary>
    [Required]
    [MaxLength(255)]
    public string StoredFileName { get; set; } = string.Empty;

    /// <summary>
    /// File extension (e.g., .jpg, .png, .webp)
    /// </summary>
    [Required]
    [MaxLength(10)]
    public string FileExtension { get; set; } = string.Empty;

    /// <summary>
    /// File size in bytes
    /// </summary>
    [Required]
    public long FileSizeBytes { get; set; }

    /// <summary>
    /// MIME type for proper content serving
    /// </summary>
    [Required]
    [MaxLength(100)]
    public string MimeType { get; set; } = string.Empty;

    /// <summary>
    /// Image width in pixels
    /// </summary>
    public int Width { get; set; }

    /// <summary>
    /// Image height in pixels
    /// </summary>
    public int Height { get; set; }

    /// <summary>
    /// Display order for user's photo gallery
    /// </summary>
    [Required]
    public int DisplayOrder { get; set; } = 1;

    /// <summary>
    /// Indicates if this is the user's primary profile photo
    /// </summary>
    [Required]
    public bool IsPrimary { get; set; } = false;

    /// <summary>
    /// Privacy level for the photo with advanced privacy controls
    /// </summary>
    [Required]
    [MaxLength(20)]
    public string PrivacyLevel { get; set; } = PhotoPrivacyLevel.Public;

    /// <summary>
    /// Stored filename for the blurred version of this photo
    /// Generated automatically when privacy level requires blurring
    /// </summary>
    [MaxLength(255)]
    public string? BlurredFileName { get; set; }

    /// <summary>
    /// Blur intensity level (0.0 = no blur, 1.0 = maximum blur)
    /// User-configurable for custom privacy preferences
    /// </summary>
    public double BlurIntensity { get; set; } = 0.8;

    /// <summary>
    /// Indicates if photo requires a match to be visible in full resolution
    /// True for Private and MatchOnly privacy levels
    /// </summary>
    [Required]
    public bool RequiresMatch { get; set; } = false;

    /// <summary>
    /// Photo upload timestamp (UTC with timezone info)
    /// </summary>
    [Required]
    public DateTime CreatedAt { get; set; }

    /// <summary>
    /// Last update timestamp
    /// </summary>
    public DateTime? UpdatedAt { get; set; }

    /// <summary>
    /// Soft delete flag
    /// </summary>
    [Required]
    public bool IsDeleted { get; set; } = false;

    /// <summary>
    /// Deletion timestamp for audit purposes
    /// </summary>
    public DateTime? DeletedAt { get; set; }

    /// <summary>
    /// Content moderation status
    /// </summary>
    [Required]
    [MaxLength(20)]
    public string ModerationStatus { get; set; } = "AUTO_APPROVED";

    /// <summary>
    /// AI-generated safety score for content moderation (0.0 - 1.0)
    /// Higher scores indicate safer content
    /// </summary>
    public double? SafetyScore { get; set; }

    /// <summary>
    /// Detailed content moderation analysis results stored as JSONB
    /// Includes ML.NET classification results, inappropriate content detection, etc.
    /// </summary>
    public JsonDocument? ModerationResults { get; set; }

    /// <summary>
    /// Timestamp when content moderation was completed
    /// </summary>
    public DateTime? ModeratedAt { get; set; }

    /// <summary>
    /// Moderation notes from content review team
    /// </summary>
    [MaxLength(1000)]
    public string? ModerationNotes { get; set; }

    /// <summary>
    /// Image quality score from processing (0-100)
    /// </summary>
    public int QualityScore { get; set; } = 100;

    /// <summary>
    /// PostgreSQL JSONB column for flexible metadata storage
    /// Can store EXIF data, processing information, AI analysis results, etc.
    /// </summary>
    public JsonDocument? Metadata { get; set; }

    /// <summary>
    /// PostgreSQL text array for photo tags
    /// Enables efficient tag-based searches using GIN indexes
    /// </summary>
    public string[]? Tags { get; set; }

    /// <summary>
    /// Content hash for duplicate detection
    /// SHA-256 hash of image content
    /// </summary>
    [MaxLength(64)]
    public string? ContentHash { get; set; }

    /// <summary>
    /// Calculated property: Full file path for storage
    /// </summary>
    [NotMapped]
    public string FilePath => $"uploads/photos/{UserId}/{StoredFileName}";

    /// <summary>
    /// Calculated property: Public URL for photo access
    /// </summary>
    [NotMapped]
    public string Url => $"/api/photos/{Id}/image";

    /// <summary>
    /// Calculated property: Thumbnail URL
    /// </summary>
    [NotMapped]
    public string ThumbnailUrl => $"/api/photos/{Id}/thumbnail";

    /// <summary>
    /// Calculated property: Blurred image URL for privacy protection
    /// Returns original URL if no blurring is required
    /// </summary>
    [NotMapped]
    public string BlurredUrl => RequiresMatch && !string.IsNullOrEmpty(BlurredFileName) 
        ? $"/api/photos/{Id}/blurred" 
        : Url;

    /// <summary>
    /// Calculated property: Safe URL that respects privacy settings
    /// Returns blurred version for private photos, original for public
    /// </summary>
    [NotMapped]
    public string SafeUrl => PrivacyLevel == PhotoPrivacyLevel.Public ? Url : BlurredUrl;

    /// <summary>
    /// Calculated property: Medium-sized image URL
    /// </summary>
    [NotMapped]
    public string MediumUrl => $"/api/photos/{Id}/medium";

    /// <summary>
    /// Helper method to set metadata from object
    /// </summary>
    public void SetMetadata<T>(T data) where T : class
    {
        if (data != null)
        {
            var json = JsonSerializer.Serialize(data);
            Metadata = JsonDocument.Parse(json);
        }
    }

    /// <summary>
    /// Helper method to get metadata as typed object
    /// </summary>
    public T? GetMetadata<T>() where T : class
    {
        if (Metadata == null) return null;
        
        try
        {
            return JsonSerializer.Deserialize<T>(Metadata.RootElement.GetRawText());
        }
        catch
        {
            return null;
        }
    }

    /// <summary>
    /// Helper method to set moderation results from analysis
    /// </summary>
    public void SetModerationResults(ModerationAnalysis analysis)
    {
        if (analysis != null)
        {
            var json = JsonSerializer.Serialize(analysis);
            ModerationResults = JsonDocument.Parse(json);
        }
    }

    /// <summary>
    /// Helper method to get moderation results as typed object
    /// </summary>
    public ModerationAnalysis? GetModerationResults()
    {
        return GetModerationResults<ModerationAnalysis>();
    }

    /// <summary>
    /// Helper method to get moderation results as typed object
    /// </summary>
    public T? GetModerationResults<T>() where T : class
    {
        if (ModerationResults == null) return null;
        
        try
        {
            return JsonSerializer.Deserialize<T>(ModerationResults.RootElement.GetRawText());
        }
        catch
        {
            return null;
        }
    }
}

/// <summary>
/// Photo processing job entity for background processing tasks
/// </summary>
[Table("photo_processing_jobs")]
public class PhotoProcessingJob
{
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int Id { get; set; }

    [Required]
    public int PhotoId { get; set; }

    [Required]
    [MaxLength(50)]
    public string JobType { get; set; } = string.Empty; // RESIZE, THUMBNAIL, QUALITY_ANALYSIS, etc.

    [Required]
    [MaxLength(20)]
    public string Status { get; set; } = "PENDING"; // PENDING, PROCESSING, COMPLETED, FAILED

    /// <summary>
    /// Job parameters stored as JSONB
    /// </summary>
    public JsonDocument? Parameters { get; set; }

    /// <summary>
    /// Job result stored as JSONB
    /// </summary>
    public JsonDocument? Result { get; set; }

    [MaxLength(1000)]
    public string? ErrorMessage { get; set; }

    [Required]
    public DateTime CreatedAt { get; set; }

    public DateTime? StartedAt { get; set; }

    public DateTime? CompletedAt { get; set; }
}

/// <summary>
/// Photo moderation log entity for audit trail
/// </summary>
[Table("photo_moderation_logs")]
public class PhotoModerationLog
{
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int Id { get; set; }

    [Required]
    public int PhotoId { get; set; }

    [MaxLength(20)]
    public string? PreviousStatus { get; set; }

    [Required]
    [MaxLength(20)]
    public string NewStatus { get; set; } = string.Empty;

    public int? ModeratorId { get; set; } // User ID of moderator

    [MaxLength(500)]
    public string? Reason { get; set; }

    [MaxLength(1000)]
    public string? Notes { get; set; }

    [Required]
    public DateTime CreatedAt { get; set; }
}

/// <summary>
/// Photo metadata class for JSONB storage
/// </summary>
public class PhotoMetadata
{
    public ExifData? Exif { get; set; }
    public ProcessingInfo? Processing { get; set; }
    public AiAnalysis? AiAnalysis { get; set; }
    public Dictionary<string, object>? Custom { get; set; }
}

public class ExifData
{
    public string? Camera { get; set; }
    public string? Lens { get; set; }
    public DateTime? DateTaken { get; set; }
    public double? Latitude { get; set; }
    public double? Longitude { get; set; }
    public string? Orientation { get; set; }
}

public class ProcessingInfo
{
    public bool WasResized { get; set; }
    public int OriginalWidth { get; set; }
    public int OriginalHeight { get; set; }
    public string? ProcessingAlgorithm { get; set; }
    public int ProcessingTimeMs { get; set; }
}

public class AiAnalysis
{
    public double? BeautyScore { get; set; }
    public string[]? DetectedObjects { get; set; }
    public string[]? DetectedFaces { get; set; }
    public bool? IsAppropriate { get; set; }
    public Dictionary<string, double>? Emotions { get; set; }
}

/// <summary>
/// Photo moderation status enumeration
/// </summary>
public static class ModerationStatus
{
    public const string AutoApproved = "AUTO_APPROVED";
    public const string PendingReview = "PENDING_REVIEW";
    public const string Approved = "APPROVED";
    public const string Rejected = "REJECTED";
}

/// <summary>
/// Photo privacy level enumeration with advanced privacy system
/// </summary>
public static class PhotoPrivacyLevel
{
    public const string Public = "PUBLIC";           // Visible to everyone
    public const string Private = "PRIVATE";         // Blurred until match
    public const string MatchOnly = "MATCH_ONLY";    // Completely hidden until match
    public const string VIP = "VIP";                // Premium privacy features
}

/// <summary>
/// Content moderation analysis results for JSONB storage
/// </summary>
public class ModerationAnalysis
{
    public bool IsAppropriate { get; set; } = true;
    public double SafetyScore { get; set; } = 1.0;
    public string[] DetectedIssues { get; set; } = Array.Empty<string>();
    public Dictionary<string, double> Classifications { get; set; } = new();
    public DateTime AnalyzedAt { get; set; } = DateTime.UtcNow;
    public string AnalysisVersion { get; set; } = "1.0";
}

/// <summary>
/// Photo constants and configuration
/// </summary>
public static class PhotoConstants
{
    public const long MaxFileSizeBytes = 10 * 1024 * 1024; // 10MB
    public const int MaxPhotosPerUser = 6;

    public static readonly string[] AllowedExtensions = { ".jpg", ".jpeg", ".png", ".webp" };
    public static readonly string[] AllowedMimeTypes = 
    {
        "image/jpeg",
        "image/jpg", 
        "image/png",
        "image/webp"
    };

    public static class ImageSizes
    {
        public const int ThumbnailWidth = 150;
        public const int ThumbnailHeight = 150;
        
        public const int MediumWidth = 400;
        public const int MediumHeight = 400;
        
        public const int LargeWidth = 800;
        public const int LargeHeight = 800;
    }

    public static class JobTypes
    {
        public const string Resize = "RESIZE";
        public const string Thumbnail = "THUMBNAIL";
        public const string QualityAnalysis = "QUALITY_ANALYSIS";
        public const string ContentModeration = "CONTENT_MODERATION";
        public const string FaceDetection = "FACE_DETECTION";
    }

    public static class JobStatus
    {
        public const string Pending = "PENDING";
        public const string Processing = "PROCESSING";
        public const string Completed = "COMPLETED";
        public const string Failed = "FAILED";
    }
}
